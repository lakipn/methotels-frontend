{"version":3,"file":"http.service.js","sourceRoot":"","sources":["../Applications/MAMP/htdocs/methotels/frontend/tmp/broccoli_type_script_compiler-input_base_path-bPgCeATy.tmp/0/src/app/http.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,qBAAwC,eAAe,CAAC,CAAA;AACxD,QAAO,SAAS,CAAC,CAAA;AAGjB;IAIE,qBAAoB,IAAS;QAAT,SAAI,GAAJ,IAAI,CAAK;QAFtB,UAAK,GAAY,EAAE,CAAC;IAG3B,CAAC;IAED,2BAAK,GAAL,UAAM,IAAI;QACR,IAAM,IAAI,GAAG,WAAW,GAAG,IAAI,CAAC,QAAQ,GAAG,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC;QACxE,IAAM,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC9B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAAC;QAEpE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,8CAA8C,EAAE,IAAI,EAAE;YAC1E,OAAO,EAAE,OAAO;SACjB,CAAC,CAAC,GAAG,CACJ,UAAC,QAAiB,IAAK,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CACvC,CAAC;IACJ,CAAC;IAED,8BAAQ,GAAR,UAAS,IAAI;QACX,oCAAoC;QACpC,IAAM,IAAI,GAAG,YAAY,GAAG,IAAI,CAAC,SAAS,GAAE,YAAY,GAAG,IAAI,CAAC,QAAQ,GAAG,SAAS,GAAG,IAAI,CAAC,KAAK,GAAG,YAAY,GAAG,IAAI,CAAC,QAAQ,GAAG,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC;QAEhK,IAAM,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC9B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAAC;QAEpE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,iDAAiD,EAAE,IAAI,EAAE;YAC3E,OAAO,EAAE,OAAO;SACjB,CAAC;aACD,GAAG,CACF,UAAC,QAAiB,IAAK,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CACvC,CAAC;IACN,CAAC;IAED,6BAAO,GAAP,UAAQ,IAAI;QACV,IAAM,IAAI,GAAG,WAAW,GAAG,IAAI,CAAC,QAAQ,GAAG,QAAQ,GAAG,IAAI,CAAC,IAAI,GAAG,QAAQ,GAAG,IAAI,CAAC,IAAI,GAAG,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC;QAC1G,IAAM,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC9B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAAC;QACpE,EAAE,CAAA,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;YAClB,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAEtC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gDAAgD,EAAE,IAAI,EAAE;YAC5E,OAAO,EAAE,OAAO;SACjB,CAAC,CAAC,GAAG,CACJ,UAAC,QAAkB,IAAK,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CACxC,CAAC;IACJ,CAAC;IAED,8BAAQ,GAAR;QACE,IAAM,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC9B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAAC;QACpE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,iDAAiD,EAAE;YACtE,OAAO,EAAE,OAAO;SACjB,CAAC,CAAC,GAAG,CACJ,UAAC,QAAkB,IAAK,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CACxC,CAAC;IACJ,CAAC;IAzDH;QAAC,iBAAU,EAAE;;mBAAA;IA2Db,kBAAC;AAAD,CAAC,AA1DD,IA0DC;AA1DY,mBAAW,cA0DvB,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Response, Headers } from '@angular/http';\nimport 'rxjs/Rx';\n\n@Injectable()\nexport class HttpService {\n\n  public token : string = '';\n\n  constructor(private http:Http) {\n  }\n\n  login(user) {\n    const body = 'username=' + user.username + '&password=' + user.password;\n    const headers = new Headers();\n    headers.append('Content-Type', 'application/x-www-form-urlencoded');\n\n    return this.http.post('http://localhost/methotels/backend/login.php', body, {\n      headers: headers\n    }).map(\n      (response:Response) => response.json()\n    );\n  }\n\n  register(user) {\n    //const body = JSON.stringify(user);\n    const body = 'firstname=' + user.firstname +'&lastname=' + user.lastname + '&email=' + user.email + '&username=' + user.username + '&password=' + user.password;\n\n    const headers = new Headers();\n    headers.append('Content-Type', 'application/x-www-form-urlencoded');\n\n    return this.http.post('http://localhost/methotels/backend/register.php', body, {\n        headers: headers\n      })\n      .map(\n        (response:Response) => response.json()\n      );\n  }\n\n  newroom(room) {\n    const body = 'roomname=' + room.roomname + '&beds=' + room.beds + '&size=' + room.size + '&tv=' + room.tv;\n    const headers = new Headers();\n    headers.append('Content-Type', 'application/x-www-form-urlencoded');\n    if(this.token != '')\n      headers.append('Token', this.token);\n\n    return this.http.post('http://localhost/methotels/backend/newroom.php', body, {\n      headers: headers\n    }).map(\n      (response: Response) => response.json()\n    );\n  }\n\n  allrooms() {\n    const headers = new Headers();\n    headers.append('Content-Type', 'application/x-www-form-urlencoded');\n    return this.http.get('http://localhost/methotels/backend/allrooms.php', {\n      headers: headers\n    }).map(\n      (response: Response) => response.json()\n    );\n  }\n\n}\n"]}